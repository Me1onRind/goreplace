{"name":"goreplace","body":"# goreplace\r\n\r\ngoreplace is a simple utility which can be used as replacement for grep + sed\r\ncombination in one of most popular cases - find files, which contain something,\r\npossibly replace this with something else.\r\n\r\n## Installation\r\n\r\nIt's suited to be installed via `go` tool, so just do usual thing:\r\n\r\n    go get github.com/piranha/goreplace\r\n\r\nAnd you should be done. You have to have `$GOPATH` set for this to work\r\n(`go` will put sources and generated binary there). Add `-u` flag there to\r\nupdate your goreplace.\r\n\r\nI prefer name `gr` to `goreplace`, so I link `gr` somewhere in my path\r\n(usually in `~/bin`) to `$GOPATH/bin/goreplace`.\r\n\r\n## Usage\r\n\r\nUsage is pretty simple, you can just run `gr` to see help on\r\noptions. Basically you just supply regexp (or a simple string - it's a regexp\r\nalways as well) as an argument and goreplace will search for it in all files\r\nstarting from the current directory, just like this:\r\n\r\n    gr somestring\r\n\r\nSome directories and files can be ignored by default (`gr` is looking for your\r\n`.hgignore`/`.gitignore` in parent directories), just run `gr` without any\r\narguments to see help message - it contains information about them.\r\n\r\nIf you need to replace found strings with something, just pass `-r\r\nreplacement` option and they will be replaced in-place. No backups are made\r\n(not that you need them, right? You're using version control, aren't you?).\r\nUnfortunately only plain strings are supported as replacement, no regexp\r\nsubmatch support yet (planned, though).","tagline":"search and replace","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}